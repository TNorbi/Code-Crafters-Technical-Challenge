@page "/register"
@inject NavigationManager NavManager

@using One_Time_Password_Web_Application.Data.Models.API_Responses
@using One_Time_Password_Web_Application.Data.Models.Register

<h1 style="text-align:center">One Time Password (OTP) Challenge</h1>

<EditForm Model="@registerModel" style="text-align:center" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <br /><br /><br /><br /><br />
    </div>

    <div>
        <h3 style="font-weight:bold; color:black;">OTP WebApp Registration</h3>
    </div>

    <div>
        <br />
    </div>

    <div class="col-8 row" style="margin:auto; padding:10px">
        <InputText class="form-control col-8" @bind-Value="registerModel.Username" placeholder="Username"></InputText>
        <ValidationMessage For="@(() => registerModel.Username)"/>
    </div>

    <br />

    <div class="col-8 row" style="margin:auto; padding:10px">
        <InputText class="form-control col-8" type="password" @bind-Value="registerModel.Password" placeholder="Password"></InputText>
        <ValidationMessage For="@(()=> registerModel.Password)"/>
    </div>

    <br />

    <div class="col-8 row" style="margin:auto; padding:10px">
        <InputText class="form-control col-8" type="password" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm Password"></InputText>
        <ValidationMessage For="@(()=> registerModel.ConfirmPassword)"/>
    </div>

    <br />

    <button type="submit">Submit</button>
    <a href="/" style="padding-left: 15px;">Already have an account? Click here to login</a>

</EditForm>

@if(registerSuccess){
    <div style="margin:auto; padding:10px">
        <p style="text-align:center; font-weight:bold; color:green">Registration successful! You'll be redirected to login page in 5 seconds!</p>
    </div>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    private bool registerSuccess = false;

    public async Task HandleValidSubmit(){
        await registerUser();
    }

    public async Task registerUser()
    {
        //here should come the register logic from API
        HttpClient client = new HttpClient();
        RegisterDTO register = new RegisterDTO {
                Username = registerModel.Username,
                Password = registerModel.Password
        };
        var response = await client.PostAsJsonAsync("https://localhost:7181/api/User/register-new-user", register);

        var registerResponse = await response.Content.ReadFromJsonAsync<RegisterResponse>();

        if (registerResponse != null){

            if(registerResponse.Code == 200){
                //register success, should go back to login page
                registerSuccess = true;
                StateHasChanged();
                await Task.Delay(5000);
                registerSuccess = false;
                NavManager.NavigateTo("/");
            }
            else if (registerResponse.Code == 300)
            {
                //username missing
            }
            else if (registerResponse.Code == 301){
                //password missing
            }
            else if (registerResponse.Code == 302){
                //password already exists
            }
            else if (registerResponse.Code == 303)
            {
                //ussername already exists
            }
            else if (registerResponse.Code == 304)
            {
                //Something went wrong during registration
            }
            else{
                //exception error
            }

        }
    }
}